Chapter : 1 Inception
//  HERE WRITE NOTE THAT YOU UNDERSTOOD FROM VIDEO ITS GOING TO FINE EVEN IF THOSE ARE NOT PERFECT BUT MUST BE WRITTEN IN SIMPLEST WAY THAT WILL
//  HELP YOU TO UNDERSTAND BETTER.

1. Is React is library or framework ?
>> React is library why because it takes minimum efforts to setup react and and its like other npm packages you can simply us use in any project given
   the example suppose we are building large application and in that large application for some part we would like to use React then we can simply add
   react library our entire project is not should be react for that. On other hand thing about React Native which is framework because it is build 
   specific for mobile app development.


>>> Bracket Pair Colorization Toggler (Use this extension good one from brackets)


2. What is Emmet in vs code ? (Good one)
>> Emmet uses different abbreviations and short expressions depending on what's passed, and then dynamically converts the abbreviations into the full code. 
   Emmet is mostly used for HTML, XML, and CSS, but it can also be used with programming languages.

   How to add : 
   Open the VS Code settings (Code → Preferences → Settings) and search for “Emmet Extensions Path”. Click “Add Item”, enter the path to the 
   folder where you've saved the snippets. json file you've created earlier and press “OK”


3. What is CDN ?
>> CDN stands for Content Delivery Network. It's a network of servers located around the world that are designed to improve 
   the speed and reliability of delivering digital content, such as web pages, images, videos, and other files, to users.

   When you access a website or app, your device requests the content from the server that hosts the website or app.
   With a CDN, instead of the server directly delivering the content to your device,the CDN acts as a middleman,
   delivering the content from a server that is geographically closer to you.

>> Why above cdn question came in mind because see this is how we are using react for alteast so below two links
   are basically CDN links.

  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  

4. What is crossorigin ?
 >>> crossorigin is an attribute that can be used in various HTML tags such as img, audio, video, link, and script.
    
    It is used to control how the browser handles requests for resources that are located on a different domain
    or origin than the website or application that is making the request. This is known as a cross-origin request.

    The value of the crossorigin attribute can be set to "anonymous" or "use-credentials" depending on
    the requirements of the resource being requested and the security needs of the website or application 
    making the request.

    Setting crossorigin to "anonymous" indicates that the resource being requested does not require any 
    user authentication information or cookies to be included in the request. This can be useful when 
    requesting resources like scripts or images that are hosted by a third-party domain or CDN.

    On the other hand, setting crossorigin to "use-credentials" indicates that the resource being 
    requested requires user authentication information or cookies to be included in the request.
    This is typically used when making requests to APIs or services that require user authentication.

    >> YOU SEE IN ABOVE SCRIPT WE ARE NEITHER PASSING anonymous NOR PASSING use-credentials so is that 
       even helpful.

      By including the crossorigin attribute in the script tag without specifying a value, 
      you're telling the browser that the requested resource (https://unpkg.com/react@18/umd/react.development.js) 
      may be subject to cross-origin restrictions and that CORS should be enabled.

     The browser will then determine the appropriate CORS settings based on the resource being 
     requested and the security needs of your web application.


>>>> See after add above two script we got access of react yes you heard it right no need to do create-react-app
     no node modules or nothing just these two line are enough to access react. Its like in js we get access of
     window object in browser console same way try to use React you will able to see all the function and properties
     of it.


>>>> You see we have these two react scripts now in our code we basically have this two script tag and after that only we
     are doing React.createElement() but what if we use this React.createElement() first and then have those script tags 
     in that case it won't work and it will give us error React not found because it make sense you are using it first and then 
     loading it from CDN.


>> There are different ways you can load this scripts do you know we learned about async and defer like these are the value you
   can pass in script i already wrote blog on that here : https://dailylearn.hashnode.dev/choosing-the-right-script-loading-strategy-async-vs-defer-in-javascript
   both are simple understand one thing with async and defer you can decide when you want to load the script ask your self why its matter 
   and how script get loaded if we don't pass any of then also incredible thing is that know you will have idea that why in react scripts 
   its good that we have't passed any of then see this will make sense only when you have read that blog.


>>> One thing i learned today that when react came into the market they came with the purpose that we need to write all these html tags in javascript
    and thats why we have all this React.createElement() React.createRoot() and all this methods to write all these html tages inside react but 
    just see in index.html how complicated it is to write nested code with it and thats why we have we have JSX now. For jsx we will learn more about
    it in next lecture.
   
   EXAMPLE : 
   <script>
        let head1 = React.createElement('h2',{},'TRYING SOMETHING');
        let head2 = React.createElement('h2',{},'BE CURIOUS');
        let div = React.createElement('div',{
          id : 'container'
        },[head1,head2]) // you see how we are passing multiple tags
        let root = ReactDOM.createRoot(document.getElementById('reactMultiRoot'))
        root.render(div)
    </script>


>>> Some  of the coding related points that we need to learn

 1.     This is how we can create h1 tag with js

    <div id="jsRoot"></div>
    <script>
        let jsHeading = document.createElement('h1');
        jsHeading.innerHTML = "TAG H1 WITH JAVASCRIPT"
        let jsRoot = document.getElementById('jsRoot');
        jsRoot.appendChild(jsHeading);
    </script>

 2.   This is how you create h1 tag with React  (MI)

      <script>

       /*
         createElement lets you create a React element. It serves as an alternative to writing JSX.
         createElement(type, props, ...children) (See what values we need to pass)
         in case of props we can pass any props or attributes of that element or even custom one
       */ 

       let reactHeading = React.createElement('h1',{
        id : 'header',
        custom : "Pass any value and understand you can have any key"
       },'TAG H1 WITH REACT');

       /*
         When you console it you will basically see the plain javascript object
         this is really interesting because till now in my mind it was like its
         going to print h1 tag and all but no. Then second question comes in mind
         how the hell its getting <h1> in browser console. (Yep will soon understand this in
         next lecture)
       */

       console.log('reactHeading',reactHeading); 

       let reactRoot = ReactDOM.createRoot(document.getElementById('reactRoot'));

       /*
         One interesting thing to learn about render method suppose in reactRoot <div> we already have some
         h1 tags and then you are rendering this reactHeading in root question is would it append it or just
         replace it ? Answer is react will replace it means all those h1 tags will be gone now and this new one
         will be render in reactRoot. (ASKED IN INTERVIEW ALSO)
       */

       reactRoot.render(reactHeading);
    </script>  


>>>>> One more interesting thing https://legacy.reactjs.org/docs/cdn-links.html see here we have different CDN link first two
      are for development that we are using currently but other two are for production and those are minified and i had idea on
      that but just look how small production file is compare to development its amazing i seen that first time.


