Chapter - 7 : Lets find the path

>> UseEffect is called after you component is rendered. We basically need to pass two perameters into that first is callback function and second
   one is dependency array.

   >>> Now question is what if we don't pass dependency array ? 

       THIS IS THE GREAT THING I LEARNED TODAY THAT IF YOU DON'T PASS EVEN EMPTY ARRAY IN UseEffect THEN IT WILL BE CALLED ON EACH RENDER DO YOU THAT 
       IS LIKE DEFAULT BEHAVIOUR OF ANY CODE OUTSIDE OF THAT HOOK BECAUSE THAT CODE IS ALSO GET EXECUTED AFTER EACH RENDER AND THEN WE MOST OF
       THE TIME WE PASS EMPTY ARRAY dependency THAT MEANS JUST CALLED IT ONCE. HERE IMPORTANT THING TO LEARN IS NOT PASSING EMPTY ARRAY ALSO
       AND THEN SEE THE BEHAVIOUR.


>>>>> REACT DOCUMENTATION SAYS THAT NEVER NEVER MEANS NEVER CREATE THE COMPONENT INSIDE COMPONENT.

>>>>  NEVER EVER WRITE YOUR useState INSIDE IF ELSE CONDITION. (I DON'T KNOW WHO DOES THAT) ALSO NEVER WRITE INSIDE FOR LOOP.

>>> NEVER USE HOOKS OUTSIDE OF COMPONENT (REALLY ALL THREE POINTS I NEVER DID)

>>>> REACT DOES LIKE INCONSITANCY YOUR COMPONENT SHOULD ALWAYS NOW WHAT IT WILL BE DOING.


>>>>  LEARN WHY WE NEED TO STORE IMAGES IN CDN ?

>>>>> Array(10).fill("") easiest way to create array.
.

>>>>> >>>>>>>>>>    NOW MAIN PART OF THIS CHAPTER IS REACT ROUTER : (SO LETS LEARN ABOUT IS)   <<<<<<<<<<<<<<<<<<<<<<< 


>>>>  To have the root config we need to use : 
      import {createBrowserRouter, RouterProvider} from 'react-route-dom'  

>>> useRouteError hook to show router messages

>>>> Never use anchor tag it refreshes the hole page use onClick for routers.

>>>>>>>>>>> SINGLE PAGE APPLICATION  <<<<<<<<<<<<<<<<<<<<<<<<
   Most of the react APPLICATION that we build are single page APPLICATIONS because it does not render hole
   page application again and again when routes change old html application does that and thats why <a href/>
   anchor tag also refresh page again and again.


 >>>>>>> THERE ARE BASICALLY TWO TYPES OF ROUTING CLIENT SIDE ROUTING AND SERVER SIDE ROUTING   

 >>>> ONE AMAZING THING TO LEARN HERE IS <LINK> TAG THAT WE USE FROM react-router-dom is BASICALLY 
      an anchor tag its just like react-router-dom do some magic and also track to make sure that 
      pages are not getting refresh

 >>>>> LETS LEARN ABOUT NESTED ROUTING : Finally i understood what is outlet WE WHERE USING THIS MANY TIME
       IN T21C 

>>>> CLIENT SIDE ROUTING MEANS WE HAVE ALL COMPONENT HERE ONLY RATHER THEN LOADING FROM SERVER SIDE.

>>> LINK ===== <a/> tag at the end of the day

>>>>>  npm and npx =>>>>>>> npx used for executable

>>>> type="module" in script tag else you project won't understand es6 feature

>>>>> HOT module reloading

>>>>> dist folder => destribution folder

>>>>> Media images takes lot of time => so parcel optimize it also

>>>> browserlist (for older version)

>>>> https server are possible with parcel thanks parcel --https

>>> port number multiple can be handle by parcel

>>>  anything that can be auto generated should be put into gitignore

>>> Pollyfill => A code which is replacement of newer version of code

>>>> Tree shaking : Remove unwanted code 

>>>> babel / transfrom-remove-console package to remove console

>>>> JSX IS NOT HTML SYNTAX IS JS BUT ITS LIKE HTLM LIKE SYNTAX IN JS

>>>> everything is component is react

>>>>  component composition => component inside another component


>>>> One component can have one parent only

>>>> Empty tag ======= React.Fragment


>>>>> Config driven UI

>>>>> ALWAYS ALWAYS US OPTIONAL CHANING


>>> Destrucuring props on the fly

   {...allPropertiesOfObj} ///   BEST THING THIS WILL PASS ALL PROPERTIES OF OBJECT AS PROPS  


 >>>> Virtual Dom =>>> Reconsolication algoo for diff  

 >>>>> .jsx ==== .js

 >>>> {MyX,MyY} from '../Header'  (ONE WAY TO DO IT)

 >>>> import * All from '../Header';  (New way to import all named export COMPONENT)
      All.MyX 
      All.MyY  

 >>>>>> REACT USES ONE WAY DATA BINDING (LEARN MORE ABOUT THIS CONCEPT)

 >>>> Input : e.target.value e.target.value event.target.value     


 >>>> Microservices

 >>> component re render only when props or state chages no other way

 >>> render first and then UseEffect get called

 >>>> Early Return 

 >>> Diff algorithem is written in React core library and it works same same in React Native


 >>> rafce create component shortcut

>>>> path , element , errorElement , children , useRouteError

>>> React is Single Page application


>>> Dynamic Segment =>>>> Dynamic Routing


>>>> createBrowserRouter , RouterProvider , path , element , errorElement , children , outlet , Dynamic Segment , useParams , useRouteError

>>>> / means from the root

>>>>> Make sure you have clear idea about outlet

>>>> class keyword for class based component  and extend React.component 

>>> Class based component must have render method and it return some jsx

>>> props in class based component this.props and same for state this.state

>>>> Why we need to write super inside constructor and pass props

>>>> this.state = {

     count : 0 ; // its simple js object nothing else
}

>>> See even if we use function based component and create 100 different states then react still uses one single big object to manage state

>>>> this.state to access and this.setState() to set

>>>> MAKE SURE WE DON'T MUTED STATE DIRECTLY

>>>>>> constructor , render , componentDidMount 

>>>> render and commit phase =>>>>>> first ALWAYS render in commit phase update happen


>>>> Finally constructor , render , componentDidMount , componentDidUpdate , ComponentWillUnmount

>>>>>>> SetInterVal is best example to understand ComponentWillUnmount


>>>> In UseEffect we can use return function for SetInterVal